package com.compiler.model;

public interface ParserConstants
{
    int START_SYMBOL = 36;

    int FIRST_NON_TERMINAL    = 36;
    int FIRST_SEMANTIC_ACTION = 70;

    int[][] PARSER_TABLE =
    {
        { -1, -1, -1, -1, -1, -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  1, -1, -1, -1, -1,  1, -1, -1,  1,  1,  1, -1, -1, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  4, -1, -1, -1, -1,  5, -1, -1,  6,  6,  7, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 14, -1, -1, -1, -1, 15, -1, -1, 16, 16, 17, -1, -1, -1, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 21, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 24, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 26, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 28, 28, 28, 28, -1, -1, 28, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, 28, 28, -1, -1, -1, -1, -1, 28, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, 32, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 36, -1, -1, -1, -1, 36, -1, -1, 36, 36, 36, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 39, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, 30 },
        { -1, -1,  2, -1, -1, -1, -1,  2, -1, -1,  2,  2,  2, -1, -1,  3,  2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, 12, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, 11, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, 23 },
        { -1, -1, 37, -1, -1, -1, -1, 37, -1, -1, 37, 37, 37, 38, 38, 38, 37, 38, 38, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 40, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 42, 42, 42, 42, -1, -1, 42, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, 42, 42, -1, -1, -1, -1, -1, 42, -1 },
        { -1, -1, 43, -1, -1, -1, -1, 43, -1, -1, 43, 43, 43, -1, -1, -1, 43, -1, -1, 44, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1, 43 },
        { -1, -1, 46, 46, 46, 46, -1, -1, 47, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, 46, -1 },
        { -1, -1, 50, 50, 50, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 50, 50, -1, -1, -1, -1, -1, 50, -1 },
        { -1, -1, 51, -1, -1, -1, -1, 51, -1, -1, 51, 51, 51, -1, -1, -1, 51, -1, -1, 51, 51, -1, 52, 52, 52, 52, -1, -1, -1, -1, 51, 51, -1, -1, 51 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 54, 55, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, 57, 57, 57, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 57, -1, -1, -1, -1, -1, 57, -1 },
        { -1, -1, 58, -1, -1, -1, -1, 58, -1, -1, 58, 58, 58, -1, -1, -1, 58, -1, -1, 58, 58, -1, 58, 58, 58, 58, 59, 60, -1, -1, 58, 58, -1, -1, 58 },
        { -1, -1, 61, 61, 61, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 61, -1, -1, -1, -1, -1, 61, -1 },
        { -1, -1, 62, -1, -1, -1, -1, 62, -1, -1, 62, 62, 62, -1, -1, -1, 62, -1, -1, 62, 62, -1, 62, 62, 62, 62, 62, 62, 63, 64, 62, 62, -1, -1, 62 },
        { -1, -1, 65, 66, 67, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70, 71, -1, -1, -1, -1, -1, 69, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 170,   7,  37,  16, 171 },
        {  38,  32,  53 },
        {  37 },
        {   0 },
        {  39,  54 },
        {  42 },
        {  45 },
        {  47 },
        {  51 },
        {   3, 174,  55 },
        {  31,  39 },
        {   0 },
        {  33,  59, 173 },
        { 172 },
        {  41 },
        {  42 },
        {  45 },
        {  47 },
        {  51 },
        {  39,  33,  59, 173 },
        {   8,  34,  43,  35 },
        {  44,   3, 175,  56 },
        {  31,  43 },
        {   0 },
        {   0 },
        {   6, 176,  31 },
        {  11,  34,  46,  35 },
        {  12,  34,  46,  35, 177 },
        {  59, 178,  52 },
        {  31,  46 },
        {   0 },
        {  13,  59, 179,  50,  48, 180,  49, 181,  16 },
        {   0 },
        { 180,  14,  59, 182,  50,  48 },
        {   0 },
        {  15,  50 },
        {  40,  32,  57 },
        {  50 },
        {   0 },
        { 183,  17,  50,  58 },
        {  18,  59, 184 },
        {  19,  59, 185 },
        {  61,  60 },
        {   0 },
        {  20,  61, 186,  60 },
        {  21,  61, 187,  60 },
        {  62 },
        {   9, 188 },
        {  10, 189 },
        {  22,  61, 190 },
        {  65,  63 },
        {   0 },
        {  64, 191,  65, 192 },
        {  23 },
        {  24 },
        {  25 },
        {  26 },
        {  67,  66 },
        {   0 },
        {  27,  67, 193,  66 },
        {  28,  67, 194,  66 },
        {  69,  68 },
        {   0 },
        {  29,  69, 195,  68 },
        {  30,  69, 196,  68 },
        {   3, 197 },
        {   4, 198 },
        {   5, 199 },
        {   6, 200 },
        {  34,  59,  35 },
        {  27,  69 },
        {  28,  69, 201 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado EOF",
        "esperado pr",
        "esperado identificador",
        "esperado constante_int",
        "esperado constante_float",
        "esperado constante_string",
        "esperado main",
        "esperado read",
        "esperado true",
        "esperado false",
        "esperado write",
        "esperado writeln",
        "esperado if",
        "esperado elif",
        "esperado else",
        "esperado end",
        "esperado repeat",
        "esperado while",
        "esperado until",
        "esperado &&",
        "esperado ||",
        "esperado !",
        "esperado ==",
        "esperado !=",
        "esperado <",
        "esperado >",
        "esperado +",
        "esperado -",
        "esperado *",
        "esperado /",
        "esperado ,",
        "esperado ;",
        "esperado =",
        "esperado (",
        "esperado )",
        "esperado main",//"<program> inválido",
        "esperado identificador read write writeln if repeat",//"<lista_steps> inválido",
        "esperado identificador read write writeln if repeat",//"<instrucao> inválido",
        "esperado identificador",//"<lista_id> inválido",
        "esperado identificador read write writeln if repeat",//"<comando> inválido",
        "esperado identificador",//"<att> inválido",
        "esperado read",//"<input> inválido",
        "esperado identificador constante_string",//"<lista_input> inválido",
        "esperado identificador constante_string",//"<o_string> inválido",
        "esperado write writeln",//"<output> inválido",
        "esperado expressao",//"<lista_exp> inválido",
        "esperado if",//"<if> inválido",
        "esperado elif else end",//"<o_elif> inválido",
        "esperado else end",//"<o_else> inválido",
        "esperado identificador read write writeln if repeat",//"<lista_cmd> inválido",
        "esperado repeat",//"<repeat> inválido",
        "esperado , )",//"<lista_exp1> inválido",
        "esperado identificador read write writeln if end repeat",//"<lista_steps1> inválido",
        "esperado ; =",//"<lista_id1> inválido", //ver com a professora
        "esperado , ; =",//"<lista_id2> inválido",
        "esperado , )",//"<lista_input1> inválido",
        "esperado identificador read write writeln if elif else end repeat while until",//"<lista_cmd1> inválido",
        "esperado while until",//"<repeat1> inválido",
        "esperado expressao",//"<expressao> inválido",
        "esperado expressão",//"<expressao1> inválido",
        "esperado expressão",//"<elemento> inválido",
        "esperado expressão",//"<relacional> inválido",
        "esperado expressão",//<relacional1> inválido",
        "esperado == != < >",//"<operador_relacional> inválido",
        "esperado expressão",//"<aritmetica> inválido",
        "esperado expressão",//"<aritmetica1> inválido",
        "esperado expressão",//"<termo> inválido",
        "esperado expressão",//"<termo1> inválido",
        "esperado expressão"//"<fator> inválido"
    };
}
