#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Compact
Input = String
Parser = LL
#RegularDefinitions

#Tokens
//Pedro Virissimo Scarelli & Vitor da Silva

pr: [a-z] [a-zA-Z]*
id:! (i_|f_|b_|s_) ([a-z][A-Z]? | [A-Z]) (([a-z] | [0-9]) [A-Z]?)*
cte: [1-9] [0-9]* | 0
cte_2: ([1-9][0-9]* | 0) , [0-9]([0-9]*[1-9])*
ct: \" ([^\n\"%]*(%x)*)* \"

:! >@ \n [^@]* \n @<

:[\n\s\t]

main = pr : "main"
read = pr : "read"
true = pr : "true"
false = pr : "false"
write = pr : "write"
writeln = pr : "writeln"
if = pr : "if"
elif = pr : "elif"
else = pr : "else"
end = pr : "end"
repeat = pr : "repeat"
while = pr : "while"
until = pr : "until"

"&&"
"||"
"!"
"=="
"!="
"<"
">"
"+"
"-"
"*"
"/"
","
";"
"="
"("
")"
#NonTerminals
<program>

<lista_steps>
<instrucao>
<lista_id>
<comando>
<att>
<input>
<lista_input>
<o_string>
<output>
<lista_exp>
<if>
<o_elif>
<o_else>
<lista_cmd>
<repeat>
<lista_exp1>


<lista_steps1>

<lista_id1>

<lista_id2>

<lista_input1>

<lista_cmd1>

<repeat1>

<expressao>  
<expressao1> 
<elemento> 
<relacional>
<relacional1> 
<operador_relacional>
<aritmetica>
<aritmetica1> 
<termo> 
<termo1> 
<fator>
#Grammar
<program> ::= #100 main <lista_steps> end #101 ;

<lista_steps> ::= <instrucao>";" <lista_steps1> ;

<lista_steps1> ::= <lista_steps> | î ;

<instrucao> ::= <lista_id> <lista_id1> |<input>|<output>|<if>|<repeat> ;


<lista_id> ::= id #104 <lista_id2> ;

<lista_id2> ::= "," <lista_id> | î ;

<lista_id1>  ::= "=" <expressao> #103 | #102 î ;

<comando> ::= <att> |<input>|<output>|<if>|<repeat> ;

<att> ::= <lista_id> "=" <expressao> #103 ;

<input> ::= read "("<lista_input>")" ;

<lista_input> ::= <o_string> id #105 <lista_input1> ;

<lista_input1> ::=  "," <lista_input> | î ;

<o_string> ::=  î | ct #106 "," ;

<output> ::= write "("<lista_exp>")" | writeln "("<lista_exp>")" #107 ;

<lista_exp> ::= <expressao>  #108 <lista_exp1>  ;

<lista_exp1> ::=  "," <lista_exp> | î ;

<if> ::= if <expressao> #109 <lista_cmd> <o_elif> #110 <o_else> #111 end ;

<o_elif> ::= î | #110 elif <expressao> #112 <lista_cmd> <o_elif> ;

<o_else> ::= î | else <lista_cmd> ;

<lista_cmd> ::= <comando>";" <lista_cmd1> ;

<lista_cmd1> ::=  <lista_cmd> | î ;

<repeat> ::= #113 repeat <lista_cmd> <repeat1> ;

<repeat1> ::=  while <expressao> #114 |  until <expressao> #115;

<expressao> ::= <elemento> <expressao1> ; 
<expressao1> ::= î | "&&" <elemento> #116 <expressao1> | "||" <elemento> #117 <expressao1> ; 
<elemento> ::= <relacional> | true #118 | false #119 | "!" <elemento> #120 ; 
<relacional> ::= <aritmetica> <relacional1> ; 
<relacional1> ::= î | <operador_relacional> #121 <aritmetica> #122 ; 
<operador_relacional>::= "==" | "!=" | "<" | ">" ; 
<aritmetica> ::= <termo> <aritmetica1> ; 
<aritmetica1> ::= î | "+" <termo> #123 <aritmetica1> | "-" <termo> #124 <aritmetica1> ; 
<termo> ::= <fator> <termo1> ; 
<termo1> ::= î | "*" <fator> #125 <termo1> | "/" <fator> #126 <termo1> ; 
<fator> ::= id #127 | 
 cte #128 | 
 cte_2 #129 | 
 ct #130 | 
 "(" <expressao> ")" | 
 "+" <fator> | 
 "-" <fator> #131 ; 




